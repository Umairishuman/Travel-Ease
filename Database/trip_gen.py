import csv
import random
from datetime import timedelta, date

def generate_location_id(continent_code, num):
    """
    Generates a location ID based on the continent code and a 6-digit number.

    Args:
        continent_code (str): The continent code (e.g., 'ASI', 'AFR', 'EUR').
        num (int): A 6-digit number.

    Returns:
        str: The generated location ID.
    """
    return f"{continent_code}-{num:06d}"

def generate_location_data(num_records=10):
    """
    Generates location data for each continent and returns it as a list of dictionaries.

    Args:
        num_records (int, optional): The number of records to generate for each continent. Defaults to 10.

    Returns:
        list: A list of dictionaries, where each dictionary represents a location record.
    """
    continents = {
        "ASI": "Asia",
        "AFR": "Africa",
        "EUR": "Europe",
        "NAM": "North America",
        "SAM": "South America",
        "OCE": "Oceania",
        "ANT": "Antarctica"
    }

    countries_by_continent = {
        "ASI": ["China", "India", "Japan", "South Korea", "Vietnam", "Thailand", "Malaysia", "Singapore", "Indonesia", "Pakistan"],
        "AFR": ["Nigeria", "Egypt", "South Africa", "Kenya", "Morocco", "Ghana", "Algeria", "Tanzania", "Ethiopia", "Angola"],
        "EUR": ["Germany", "France", "United Kingdom", "Italy", "Spain", "Netherlands", "Sweden", "Switzerland", "Poland", "Ukraine"],
        "NAM": ["United States", "Canada", "Mexico", "Cuba", "Jamaica", "Haiti", "Dominican Republic", "Puerto Rico", "Guatemala", "Panama"],
        "SAM": ["Brazil", "Argentina", "Colombia", "Peru", "Chile", "Venezuela", "Ecuador", "Bolivia", "Paraguay", "Uruguay"],
        "OCE": ["Australia", "New Zealand", "Fiji", "Papua New Guinea", "Hawaii", "Guam", "Micronesia", "Vanuatu", "Solomon Islands", "Marshall Islands"],
        "ANT": ["McMurdo Station", "Amundsen-Scott Station", "Vostok Station", "Palmer Station", "Esperanza Base", "Base San Martín",  "Orcadas Base", "Casey Station", "Mawson Station", "Davis Station"]
    }
    cities_by_continent = {
        "ASI": ["Beijing", "Mumbai", "Tokyo", "Seoul", "Hanoi", "Bangkok", "Kuala Lumpur", "Singapore", "Jakarta", "Karachi"],
        "AFR": ["Lagos", "Cairo", "Johannesburg", "Nairobi", "Casablanca", "Accra", "Algiers", "Dar es Salaam", "Addis Ababa", "Luanda"],
        "EUR": ["Berlin", "Paris", "London", "Rome", "Madrid", "Amsterdam", "Stockholm", "Zurich", "Warsaw", "Kyiv"],
        "NAM": ["New York", "Toronto", "Mexico City", "Havana", "Kingston", "Port-au-Prince", "Santo Domingo", "San Juan", "Guatemala City", "Panama City"],
        "SAM": ["Rio de Janeiro", "Buenos Aires", "Bogota", "Lima", "Santiago", "Caracas", "Quito", "La Paz", "Asuncion", "Montevideo"],
        "OCE": ["Sydney", "Auckland", "Suva", "Port Moresby", "Honolulu", "Hagatna", "Palikir", "Port Vila", "Honiara", "Majuro"],
        "ANT": ["McMurdo Station", "Amundsen-Scott Station", "Vostok Station","Palmer Station", "Esperanza Base", "Base San Martín", "Orcadas Base", "Casey Station", "Mawson Station", "Davis Station"]
    }

    data = []
    for continent_code, continent_name in continents.items():
        for i in range(num_records):
            record_id = generate_location_id(continent_code, i + 1)
            # Ensure unique names, cities, and countries.
            destination_name = f"{continent_name} Destination {i+1}"
            city = cities_by_continent[continent_code][i]
            country = countries_by_continent[continent_code][i]
            data.append({
                "dest_id": record_id,
                "destination_name": destination_name,
                "city": city,
                "region": continent_name,
                "country": country
            })
    return data



def generate_trips_data(locations, num_records=50):
    """
    Generates data for the trips table, ensuring start_loc_id matches generated locations.

    Args:
        locations (list): A list of dictionaries representing location data, as generated by generate_location_data().
        num_records (int, optional): The number of trip records to generate. Defaults to 50.

    Returns:
        list: A list of dictionaries, where each dictionary represents a trip record.
    """
    trip_categories = ['adventure', 'cultural', 'leisure', 'wildlife', 'historical', 'beach', 'mountain', 'cruise']
    trip_status = ['active', 'completed', 'cancelled']
    operators = [f"OP-{i:06d}" for i in range(1, 51)]  # Generate operator IDs

    trips_data = []
    for i in range(num_records):
        trip_id = f"TRIP-{i+1:06d}"
        title = f"Trip {i+1}: A Journey to Remember"
        description = f"This is a fantastic trip to explore amazing destinations.  Trip {i+1} description."
        capacity = random.randint(5, 50)
        duration = random.randint(3, 15)
        category = random.choice(trip_categories)
        status = random.choice(trip_status)
        price_per_person = round(random.uniform(500, 5000), 2)

        # Select a start location.  Use the location data that was passed in.
        start_location = random.choice(locations)
        start_loc_id = start_location['dest_id'] # Correct way to get the ID.

        # Generate start and end dates
        start_date = date(2025, 1, 1) + timedelta(days=random.randint(0, 365))
        end_date = start_date + timedelta(days=duration)

        operator_id = random.choice(operators)

        # Generate a URL.
        profile_trip_image_url = f"https://example.com/trip_image_{i+1}.jpg" #Made it a valid URL

        trips_data.append({
            "trip_id": trip_id,
            "title": title,
            "descirption": description,
            "capacity": capacity,
            "duration": duration,
            "category": category,
            "status": status,
            "price_per_person": price_per_person,
            "start_loc_id": start_loc_id,
            "start_date": start_date.strftime('%Y-%m-%d'),  # Format dates for CSV
            "end_date": end_date.strftime('%Y-%m-%d'),
            "operator_id": operator_id,
            "profileTrip_image_url": profile_trip_image_url,
        })
    return trips_data

def write_to_csv(data, filename="trips_data.csv"):
    """
    Writes the generated trips data to a CSV file.

    Args:
        data (list): A list of dictionaries, where each dictionary represents a trip record.
        filename (str, optional): The name of the CSV file to write to. Defaults to "trips_data.csv".
    """
    if not data:
        print("No data to write to CSV.")
        return

    fieldnames = data[0].keys()
    try:
        with open(filename, mode='w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)
        print(f"Data successfully written to {filename}")
    except Exception as e:
        print(f"An error occurred while writing to CSV: {e}")

if __name__ == "__main__":
    location_data = generate_location_data(num_records=10) # Generate location data
    trips_data = generate_trips_data(location_data, num_records=50)  # Generate trips data, passing in location data.
    write_to_csv(trips_data)
